Первичная инструкция - на страничке https://habr.com/ru/post/586808/, от Rilkener

сначала поставим собственно lua
	sudo apt install lua5.4

Если нужно проверить работу, запускается просто
	lua
	lua test.lua

Ставим neovim:
	https://github.com/neovim/neovim/wiki/Installing-Neovim
	https://github.com/neovim/neovim/releases/

Кратко об установке:
	cd ~/.local/bin/nvim/     -    переходим в директорию для установки nvim
	curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage   -    загружаем приложение nvim
	chmod u+x nvim.appimage     -     выдаем разрешение не исполнение
	alias nvim='~/.local/bin/nvim/nvim.appimage'    -     добавляем алиас на запуск редактора в .bashrc


Ставим текущий конфиг:
	git clone --depth 1 https://github.com/VasyaPupkin120/nvimconf ~/.config/nvim
	git clone --depth 1 git@github.com:VasyaPupkin120/nvimconf.git ~/.config/nvim

Соответственно, в директории ~/.config/nvim будет такая структура:
   --------------------------------------------------------------
   |	nvim/                                                   |   
   |		lua/                                                |   
   |			keymaps.lua                                     |   
   |			plugins.lua                                     |   
   |			settings.lua                                    |   
   |		trash/                                              |   
   |			list_commands.txt                               |   
   |			Literation Mono Nerd Font Complete Mono.ttf     |   
   |			notes.txt                                       |   
   |		init.lua                                            |   
   --------------------------------------------------------------


Стоит внимательно изучить сочетания клавиш для команд в файле keymaps.lua.


Теперь применяем настройки каждого файла из директории nvim/lua/, файл  plugins.lua - в последнюю очередь. Настройки применяются командой  :so % для каждого файла:
	:so %


Менеджер плагинов в данном конфиге - packer.nvim - должен поставиться после команды :so % для файла plugins.lua, убедиться в наличии можно если отрабатывает автодополнение (через Tab) при вводе команды :PackerInstall. Без установленного и работоспосбного менеджера нет смысла ставить плагины.
Страничка менеджера плагинов:
	https://github.com/wbthomason/packer.nvim:
Список всех команд менеджера можно увидеть при автодополнении через Tab команды :Packer...


Ставим все плагины из plugins.lua. Плагины постоянно обновляются и постоянно требуют новую верситю nvim, поэтому в случае проблем в первую очередь стоит обновить редактор.
	:PackerInstall
Часть плагинов закомментирована, можно раскомментировать при необходимости и снова выполнить :PackerInstall
Плагины устанавливаются в директорию
    ~/.local/share/nvim/site/pack/packer/start


Ставим LSP-сервера для нужных языков. Их может быть несколько для одного языка. Для установки используется плагин nvim-lsp-installer. Команду :LspInstall выполнить в файле с расширением для нужного языка программирования.
	:LspInstall
Также установить lsp можно по имени:
	:LspInstall sumneko_lua
	:LspInstall pyright
Также, список всех команд для управления LSP можно увидеть через автодополнение :Lsp...
Стоит в первую очередь поставить sumneko-lua - LSP для Lua.


В случае ошибок в плагинах или неработоспособности можно деинсталлировать все установленные плагины через :PackerClean, оставить в plugins.lua самый минимум плагинов - сам Packer и цветовую схему закомментировав остальные все. По одному подключать и устанавливать обратно через :PackerInstall. Рано или поздно косяк с плагином будет найден. С файлами keymaps.lua и settings.lua обычно нет никаких проблем.


LSP-сервера - это не плагины к nvim, для управления ими (установки, обновления, удаления, логов) используется набор команд :Lsp..., полученный после установки nvim-lsp-installer.


Плагин для настройки lsp - neovim/nvim-lspconfig.


Для работы автодополнения подключены четыре плагина 
     'hrsh7th/nvim-cmp'
     'hrsh7th/cmp-nvim-lsp'
     'hrsh7th/cmp-buffer'
     'saadparwaiz1/cmp_luasnip'


Для автодополнения ключевым словом ЯП или именем перемнной используется сочетание Ctrl-Space в режиме вставки, для автодополнения словом из набора всех слов из всех открытых буферов используется сочетание Ctrl-n или Ctrl-p также в режмие вставки. Для навигации по вариантам автодопления - Ctrl-n и Ctrl-p и для ключевых слов и для слов из буферов.


Для просмотра doc-строки об использумой функции нажимается английская K (в верхнем регистре), для перехода на определение испльзуемой функции нажимается сочетание gd. Все сочетания клавиш можно посмотреть в keymaps.lua.


Для удобства настройки, применение изменных настроек к текущему файлу забинжено на F3 в командном режиме.


Своп-файл отключается в settings.lua
    opt.swapfile = false


Плагин powerman/vim-plugin-ruscmd отвчает за работу в командном режиме на русской раскладке.


Список открытых буферов можно посмотреть по сочетанию Ctrl-p и Ctrl-a.


Быстрое комментирование выделенных строк - по сочетанию gc в командном режме (плагин numToStr/Comment.nvim). Этот плагин нужно запустить при начале работы поддерживать в активном режиме, для этого добавил в settings.lua строчку в конец.
    cmd [[lua require('Comment').setup()]]


Очень хочется красивую строчку-статус в нижней части. Для этого исползуется плагин nvim-lualine/lualine.nvim и шрифт Literation Mono Nerd Font Complete Mono.ttf. Этот плагин также требуется запускать при начале работы:
    cmd [[lua require('lualine').setup()]]
Стандартный вид строки состояния вполне функциональный, но можно поискать другие варианты внешнего вида.

Шрифт есть в директории trash/ или по ссылке https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/LiberationMono/complete/Literation%20Mono%20Nerd%20Font%20Complete%20Mono.ttf


включение поддержки мыши в данном конфиге:
    opt.mouse = 'a'



Для нечеткого поиска по открытым буферам используется плагин Telescope - nvim-telescope/telescope.nvim. Для его работы нужно установить в систему утилиту ripgrep. Для работы использовать в командном режиме сочетания:
    <s - для открытия окна поиска слова
    <# - для поиска слова под курсором


При применении настроек через :so иногда может забиваться вся оперативная память. Лечится перезапуском nvim.


При создании своих сочетаний команд в keymaps.lua не нужно указывать пробелы внутри команд, они интерпретируются как нажатие на пробел. 


Просмотр всех ошибок и уведомлений LSP -сервера в конкретной строке - Space+e


Чтобы заработал плагин менеджера классов и функций majutsushi/tagbar требуется установить утилиту ctags, которая собирает информацию об всех именах и позициях переменных, функций, классов. Для nvim это программка Exuberant Ctags, пакет называется exuberant-ctags, устновился без проблем, плагин тоже установился, теперь можно по F8 вызывать дерево функций.


Навигация по окнам теперь по Ctrl-[hjkl].


можно читать help по плагинам с помощью команды :help <plugin_name>, например :help treesitter


Плагин lua-cmp может выполнять автоимпорт просто по имени. Для этого достаточно начать использовать имя класса, функции или переменной, запустить автодополнение имени из определений - Ctrl-Space, и одновременно вместе с вариантами автодополнений будет показано, возможно или нет выполнить автоимпорт. Причем, если определение находится в разных модулях, можно выбирать из какого будет выполнен импорт.


При работе с проектами в виртуальном окружении, редактор  следует запускать, УЖЕ находясь в виртуальном окружении - чтобы не было проблем с импортами библиотек (LSP может не увидеть библиотеку DRF).


Переход на одну реальную строку по gj также и в режиме выделения. Стало удобнее.


При ошибке "cannot access member objects for type" при работе с менеджером записей моделей Django - нужен питоновский пакет с названием django-stubs, установленный в виртуальное окружение. По словам со SO это проблема с метаклассами в LSP-сервере или что то такое.
    pip install django-stubs


Чтобы автоимпорты нормально работали, не нужно изменять рабочую директорию через Space-wa



Как установить менеджер плагинов packer.nvim:
Нужно в файл plugins.lua вставить в начало такой код:

	-- Установка менеджера плагинов, а если менеджера нет то и загрузка
	local execute = vim.api.nvim_command
	local fn = vim.fn

	local install_path = fn.stdpath('data')..'/site/pack/packer/opt/packer.nvim'

	if fn.empty(fn.glob(install_path)) > 0 then
	  execute('!git clone https://github.com/wbthomason/packer.nvim '..install_path)
	  execute 'packadd packer.nvim'
	end

	-- Собственно, плагины
    ...



В начале 2023 года что то произошло с lsp-сервером для Lua - sumneko_lua, выглядит так, будто разработчик изменл свое имя на Github, сервер же сменил название на lua_ls. Чтобы заработало, нужно сменить названия.
Переимновать директорию:
    ~/.local/share/nvim/site/pack/packer/start/nvim-lsp-installer/lua/nvim-lsp-installer/servers/sumneko_lua
    ~/.local/share/nvim/site/pack/packer/start/nvim-lsp-installer/lua/nvim-lsp-installer/servers/lua_ls
В файле ~/.local/share/nvim/site/pack/packer/start/nvim-lsp-installer/lua/nvim-lsp-installer/servers/init.lua отредактировать строчку - закомментить старое имя и ввести новое:
    -- "sumneko_lua",
    "lua_ls",
После чего установить этот lsp напрямую указав его имя:
    :LspInstall lua_ls
Рано или поздно кто нибудь поправит плагин и этого не придется делать вручную...


